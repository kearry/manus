// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tasks         Task[]
  accounts      Account[]
  sessions      Session[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Task models
model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  // Using String instead of enum for SQLite compatibility
  status      String      @default("PENDING") // Values: PENDING, PLANNING, IN_PROGRESS, RESOLVED, CLOSED, FAILED
  priority    String      @default("MEDIUM")  // Values: LOW, MEDIUM, HIGH
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  completedAt DateTime?
  
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  steps       TaskStep[]
  logs        AgentLog[]
  result      TaskResult?
  toolUsages  ToolUsage[]
}

model TaskStep {
  id          String        @id @default(cuid())
  taskId      String
  task        Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  stepNumber  Int
  description String
  // Using String instead of enum for SQLite compatibility
  status      String        @default("PENDING") // Values: PENDING, IN_PROGRESS, COMPLETED, FAILED
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  logs        AgentLog[]

  @@unique([taskId, stepNumber])
}

model TaskResult {
  id           String   @id @default(cuid())
  taskId       String   @unique
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  content      String
  contentType  String   @default("text/plain")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Could store files, summary data, or other output
  fileUrls     String?
  metadata     String?  // JSON string of additional metadata
}

// Agent logs for auditing and monitoring
model AgentLog {
  id        String    @id @default(cuid())
  taskId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  stepId    String?
  step      TaskStep? @relation(fields: [stepId], references: [id])
  // Using String instead of enum for SQLite compatibility
  level     String    // Values: DEBUG, INFO, WARNING, ERROR
  message   String
  details   String?   // JSON string of additional details
  timestamp DateTime  @default(now())
  agentType String    // Type of agent that generated the log
}

// Tool usage tracking
model ToolUsage {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  toolName  String
  command   String
  startedAt DateTime @default(now())
  endedAt   DateTime?
  success   Boolean?
  output    String?  // Could be large, consider external storage for production
  error     String?
}

// Add this line to configure seeding
generator seeder {
  provider = "node-ts"
  output   = "../prisma/seed.ts"
}